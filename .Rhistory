knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
install.packages("ISLR")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
install.packages("caret")
install.packages("e1071")
install.packages("kernlab")
library(caret)
library(e1071)
library(kernlab)
library(ISLR)
library(ggplot2)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
set.seed(32323)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage, colour=jobclass, data=training)
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
qplot(age,wage, colour=jobclass, data=training)
qq <- qplot(age,wage,colour=education, data=training)
qq + geom_smooth(method="lm",formula=y~x)
install.packages("Hmisc")
library(ISLR)
library(ggplot2)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p1
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p2 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot","jitter"))
grid.arrange(p1,p2, ncol=2)
library(grid)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p2 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot","jitter"))
grid.arrange(p1,p2, ncol=2)
library(gridExtra)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p2 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot","jitter"))
grid.arrange(p1,p2, ncol=2)
library(ISLR)
library(ggplot2)
library(Hmisc)
library(gridExtra)
t1 <- table(cutWage, training$jobclass)
t1
t1 <- table(cutWage, training$jobclass)
t1
prop.table(t1,1)
qplot(wage, colour=education, data=training, geom="density")
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
data(spam)
## 75% to training, 25% to test
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
## all in index set to training
training <- spam[inTrain,]
## all not in index to test
testing <- spam[-inTrain,]
dim(training)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training[,-58], method=c("center","scale"))
trainCapAveS <- predict(preObj, training[,-58]$capitalAve)
trainCapAveS <- predict(preObj,training[,-58]$capitalAve)
preObj <- preProcess(training[,-58], method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
preObj <- preProcess(training[,-58], method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObdj, testing[,-58])$capitalAve
testCapAveS <- predict(preObj, testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
?predict
preObj <- preProcess(training[,-58],method="knnImput")
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj, training[,-58])$capAve
quantile(capAve - capAveTruth) ##capAveTruth is the standardized capital ave
inTrain <- createDataPartition(y=Wage$wage,p=0.7, list=FALSE)
training <- Wage[inTrain,] ; testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
dummies
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv
library(splines)
library(splines)
bsBasis <- bs(training$age,df=3)
bsBasis
library(splines)
bsBasis <- bs(training$age,df=3)
#head(bsBasis)
## column 1 is age, column 2 is age squared, column 3 is age cubed
##Fitting curves with splines
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19, cex=0.5)
points(training$age, predict(lm1,newdata=training), col="red", pch=19, cex=0.5)
library(splines)
bsBasis <- bs(training$age,df=3)
#head(bsBasis)
## column 1 is age, column 2 is age squared, column 3 is age cubed
##Fitting curves with splines
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19, cex=0.5)
points(training$age, predict(lm1,newdata=training), col="red", pch=19, cex=0.5)
##The bsBasis (splined) fits the plot better than a line would
#When moving to the test set you would use the bsBasis formula with the new data plugged in
predict(bsBasis, age=testing$age)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
prProc <- prProcess(log10(spam[,-58]+1), method = "pca", pcaComp=2)
prProc <- preProcess(log10(spam[,-58]+1), method = "pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
preProc <- preProcess(log10(spam[,-58]+1), method = "pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col=typeColor)
typeColor <- ((spam$type = "spam")*1 + 1)
typeColor <- ((spam$type = "spam")*1 + 1)
preProc <- preProcess(log10(spam[,-58]+1), method = "pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2])
preProc <- preProcess(log10(spam[,-58]+1), method = "pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2])
trainPC <- predict(preProc, log10(training[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data = trainPC)
testPC <- predict(preProc, log10(testing[,-58]+1))
confusionMatrix(testing$type, predict(modelFit, testPC))
modelFit <- train(training$type ~ ., method="glm", data = trainPC)
View(training)
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
data(faithful)
set.seed(333)
summary(faithful)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
summary(trainFaith)
str(trainFaith)
set.seed(333)
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab = "Waiting", ylab="Duration")
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted,lwd=3)
View(lm1)
coef(lm1)[1] + coef(lm1)[2]*80
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted,lwd=3)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, lm1$fitted, lwd=3)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted,lwd=3)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, predict(lm1,newdata=testFaith), lwd=3)
#calc RMSE on training
sqrt(sum(lm1$fitted-trainFaith$eruptions)^2)
#calc RMSE on training
sqrt(sum((lm1$fitted-trainFaith$eruptions))^2)
#calc RMSE on test
#calc RMSE on training
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
#calc RMSE on test
#calc RMSE on training
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
#calc RMSE on test
sqrt(sum((predict(lm1, newdata=testFaith)-testFaith$eruptions)^2))
pred1 <- predict(lm1, newdata=testFaith, interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue")
matlines(testFaith$waiting[ord], pred1[ord,], type="l", ,col-c(1,2,2),lty=c(1,1,1),lwd=3)
pred1 <- predict(lm1, newdata=testFaith, interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue")
matlines(testFaith$waiting[ord], pred1[ord,], type="l", ,col=c(1,2,2),lty=c(1,1,1),lwd=3)
modFit <- train(eruptions ~ waiting, data=trainFaith, method="lm")
summary(modFit$finalModel)
data(Wage)
Wage <- subset(Wage, select=c(logwage))
summary(Wage)
data(Wage)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage, colour=jobclass, data=training)
qplot(age,wage, colour=jobclass, data=training)
qplot(age,wage, colour=education, data=training)
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(modFit)
##Caret automatically puts factors into dummies, and continuous data into standard variables
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(finMod)
##Caret automatically puts factors into dummies, and continuous data into standard variables
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod, 1, pch=19, cex=0.5, col="#00000010")
qplot(finMod$fitted,finMod$residuals, colour=race, data=training)
plot(finMod$residuals, pch=19)
pred <- predict(modFit, testing)
qplot(wage, pred, colour=year, data=testing)
print(modFit)
##Caret automatically puts factors into dummies, and continuous data into standard variables
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(modFit)
summary(finMod)
knitr::opts_chunk$set(echo = TRUE)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$compressiveStrength, p=3/4, list=FALSE)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4, list=FALSE)
training = mixtures[inTrain,]
testing = mixtures[-intrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4, list=FALSE)
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4, list=FALSE)
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength, pch=19)
library(Hmisc)
plot(training$CompressiveStrength, pch=19)
?facet_wrap
plot(training$CompressiveStrength, pch=19)+facet_wrap()
plot(training$CompressiveStrength, pch=19)+facet_wrap(vars())
View(testing)
plot(training$CompressiveStrength, colour = "Cement" pch=19)
plot(training$CompressiveStrength, colour = "Cement", pch=19)
plot(training$CompressiveStrength, colour = Cement, pch=19)
plot(training$CompressiveStrength, colour = training$Cement, pch=19)
qplot(training$CompressiveStrength, colour = Cement, pch=19)
?cut2
?plot
?qplot
cutCement <- cut2(training$Cement, g=3)
qplot(training$CompressiveStrength, colour = cutCement, pch=19)
qplot(training$CompressiveStrength,index, colour = cutCement, pch=19)
qplot(training$CompressiveStrength,index, fill = Cement, pch=19)
qplot(training$CompressiveStrength, fill = Cement, pch=19)
qplot(training$CompressiveStrength, fill = training$Cement, pch=19)
plot(training$CompressiveStrength, colour=training$cutCement, pch=19)
plot(training$CompressiveStrength, fill=training$cutCement, pch=19)
qplot(training$CompressiveStrength, fill = training$Cement, pch=19)
qplot(training$CompressiveStrength, fill = training$cutCement, pch=19)
qplot(training$CompressiveStrength, colour = training$cutCement, pch=19)
qplot(x=training$CompressiveStrength, colour = training$cutCement, pch=19)
qplot(x=training$CompressiveStrength, y=row.names(training), colour = training$cutCement, pch=19)
plot(training$CompressiveStrength, training$CompressiveStrengthpch=19)
plot(training$CompressiveStrength, training$CompressiveStrength, pch=19)
plot(training$CompressiveStrength, training$FlyAsh, pch=19)
plot(training$FlyAsh, training$CompressiveStrength, pch=19)
plot( training$CompressiveStrength, pch=19)
plot(training$Age, training$CompressiveStrength, pch=19)
plot( training$CompressiveStrength, pch=19)
plot(training$Age, training$CompressiveStrength, pch=19)
cutFlyAsh <- cut2(training$FlyAsh, g=3)
cutFlyAsh <- cut2(training$FlyAsh, g=3)
plot( training$CompressiveStrength, col=cutFlyAsh, $pch=19)
training$cutFlyAsh <- cut2(training$FlyAsh, g=3)
plot( training$CompressiveStrength, col=training$cutFlyAsh, $pch=19)
plot( training$CompressiveStrength, col=training$cutFlyAsh, pch=19)
plot( training$CompressiveStrength, #col=training$cutFlyAsh,
pch=19)
plot( training$CompressiveStrength, col=training$cutFlyAsh,
pch=19)
